<?php

/**
 * @file
 * Hook implementations.
 */

// RDF.
define('ARCHIDORA_RDF_URI', 'http://islandora.ca/archivematica#');
define('ARCHIDORA_OBJ_DELETION', 'isReadyForDeletion');
define('ARCHIDORA_DO_NOT_AUTO_UPLOAD_CHILDREN', 'doNotAutoUploadChildren');

/**
 * Implements hook_menu().
 */
function archidora_menu() {
  $items = array();

  $items['admin/islandora/archidora'] = array(
    'title' => 'Archivematica Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archidora_admin_form'),
    'access arguments' => array('administer archivematica integration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/admin.form.inc',
  );
  $items['islandora/object/%islandora_object/manage/archivematica'] = array(
    'title' => 'Archivematica',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archidora_object_status_form', 2),
    'access arguments' => array('administer archivematica integration'),
    'file' => 'includes/object.form.inc',
  );
  $items['islandora/object/%islandora_object/archidora/%/delete'] = array(
    'title' => 'Archivematica Delete Object',
    'type' => MENU_CALLBACK,
    'page callback' => 'archidora_obj_delete_page_callback',
    'page arguments' => array(2),
    'access callback' => 'archidora_obj_delete_access_callback',
    'access arguments' => array(2, 4),
  );
  $items['islandora/object/%islandora_object/archidora/delete_all'] = array(
    'title' => 'Archivematica Delete All',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archidora_object_delete_confirm', 2),
    'access callback' => TRUE,
    'file' => 'includes/object.form.inc',
  );
  return $items;
}

/**
 * Implements hook_islandora_derivative().
 */
function archidora_islandora_derivative(AbstractObject $object) {
  $mod_path = drupal_get_path('module', 'archidora');


     watchdog('archidora_islandora_derivatives', 'In derviatives hook @test.', array('@test' => 'a test'), WATCHDOG_WARNING);


  $items = array();

  module_load_include('inc', 'archidora', 'includes/utilities');
  $skip_models = archidora_skip_content_models();

  if (count(array_intersect($object->models, $skip_models)) === 0 && archidora_get_parent($object)) {
    $items[] = array(
      'force' => FALSE,
      'source_dsid' => NULL,
      'destination_dsid' => NULL,
      'weight' => '1000',
      'function' => array(
        'archidora_derivative_callback',
      ),
      'file' => "$mod_path/includes/derivatives.inc",
    );

    // XXX: Workaround for broken hook filtering, for modification
    // (NULL -> NULL should always be run, or rather they should be left to
    // figure out if they should run on their own).
    foreach ($object as $datastream) {
      $items[] = array(
        'force' => FALSE,
        'source_dsid' => $datastream->id,
        'destination_dsid' => NULL,
        'weight' => '1000',
        'function' => array(
          'archidora_derivative_callback',
        ),
        'file' => "$mod_path/includes/derivatives.inc",
      );
    }
  }
    $i  = var_export($items,TRUE);
    watchdog('archidora_islandora_derivatives', 'In derviatives hook items dump @test.', array('@test' => $i), WATCHDOG_WARNING);




  return $items;
}

/**
 * Implements hook_permission().
 */
function archidora_permission() {
  return array(
    'administer archivematica integration' => array(
      'title' => t('Administer Archivematica Integration'),
      'description' => t('Administer settings for Archivematica integration and display the Archivematica tab on objects.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function archidora_cron() {
  $q = db_select('archidora_aips', 'a')
    ->fields('a', array())
    ->condition('finalized', 0);

  module_load_include('inc', 'archidora', 'includes/archivematica');
  $aips = $q->execute()->fetchAll();
  $to_finalize = array_filter($aips, 'archidora_should_finalize_aip');
  array_map('archidora_finalize_aip', $to_finalize);
}


/**
 * Access callback for updating an object's OBJ's RELS-INT to flag deletion.
 *
 * @param AbstractObject|string $object
 *   An AbstractObject or PID representing an object within Fedora.
 * @param string $passed_token
 *   The API token defined on the administration page for the module.
 *
 * @return bool
 *   TRUE if allowed, FALSE otherwise.
 */
function archidora_obj_delete_access_callback($object, $passed_token) {
  $api_token = variable_get('archidora_islandora_api_key', '');
  return !empty($api_token) && $api_token == $passed_token;
}

/**
 * Page callback to flag an object's OBJ datastream for deletion.
 *
 * @param AbstractObject|string $possible_object
 *   An AbstractObject or PID representing an object within Fedora.
 */
function archidora_obj_delete_page_callback($possible_object) {
  drupal_static_reset('islandora_get_tuque_connection');
  $tuque = islandora_get_tuque_connection(user_load(1));
  if (!is_object($possible_object)) {
    $pid = arg(2);
    $tuque->cache->delete($pid);
    $object = $tuque->repository->getObject($pid);
  }
  else {
    $tuque->cache->delete($possible_object->id);
    $object = $tuque->repository->getObject($possible_object->id);
  }
  if (isset($object['OBJ'])) {
    $rels_exists = $object['OBJ']->relationships->get(ARCHIDORA_RDF_URI, ARCHIDORA_OBJ_DELETION);
    if (empty($rels_exists)) {
      $object['OBJ']->relationships->add(ARCHIDORA_RDF_URI, ARCHIDORA_OBJ_DELETION, 'TRUE', RELS_TYPE_PLAIN_LITERAL);
    }
    watchdog('archidora', 'The object @obj has had its OBJ flagged for deletion!', array('@obj' => $object->id), WATCHDOG_INFO);
  }
  else {
    watchdog('archidora', 'The object @obj does not contain an OBJ datastream to mark for deletion!', array('@obj' => $object->id), WATCHDOG_WARNING);
  }
}

/**
 * Implements hook_islandora_datastream_alter().
 */
function archidora_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, array &$context) {
  if ($context['action'] == 'purge') {
    $datastream->relationships->remove(ARCHIDORA_RDF_URI, ARCHIDORA_OBJ_DELETION);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function archidora_cron_queue_info() {
  $q = array();

  $cron_time = variable_get('archidora_cron_time', 600);
  if ($cron_time < 0) {
    $cron_time = variable_get('archidora_cron_time_custom', 600);
  }
  $q['archidora_cron_queue'] = array(
    'worker callback' => 'archidora_cron_queue_callback',
    'time' => $cron_time,
  );

  return $q;
}

/**
 * Cron queue callback; send the given object to Archivematica.
 *
 * @param string $pid
 *   The PID of an object to load and pass off to Archivematica.
 */
function archidora_cron_queue_callback($pid) {
  static $tuque = NULL;

  if ($tuque === NULL) {
    // XXX: Need to be sure to have management permissions, since cron makes
    // no guarantees about the user at runtime.
    $user = user_load(1);
    drupal_static_reset('islandora_get_tuque_connection');
    $tuque = islandora_get_tuque_connection($user);
    SimpleCache::resetCache();
  }

  $object = islandora_object_load($pid);
  if ($object) {
    module_load_include('inc', 'archidora', 'includes/archivematica');
    archidora_send_to_archivematica($object);
  }
  else {
    watchdog('archidora_cron_queue', 'Failed to load @id in order to send to Archivematica.', array(
      '@id' => $pid,
    ), WATCHDOG_WARNING, l(t('object page'), "islandora/object/{$pid}"));
  }
}

/**
 * Implements hook_archidora_object_sent().
 */
function archidora_archidora_object_sent(AbstractObject $object, $aip) {
  $paged_content_models = array(
    'islandora:newspaperPageCModel',
    'islandora:pageCModel',
  );
  $parents = array();
  if (array_intersect($paged_content_models, $object->models)) {
    foreach ($object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOf') as $relationship) {
      $parents[] = $relationship['object']['value'];
    }
  }
  foreach ($object->relationships->get(FEDORA_RELS_EXT_URI, variable_get('islandora_compound_object_relationship', 'isConstituentOf')) as $compound_parent) {
    $parents[] = $compound_parent['object']['value'];
  }

  module_load_include('inc', 'archidora', 'includes/archivematica');
  // XXX: Need to flip a couple flags without changing the originals, so clone
  // and go to town. Need to flip the flags to avoid trying to insert or
  // finalize the AIP multiple times.
  $aip_clone = clone $aip;
  $aip_clone->created = FALSE;
  $aip_clone->manual = FALSE;
  foreach (array_map('islandora_object_load', array_unique($parents)) as $parent) {
    if (archidora_get_em_iri_from_object($parent) !== $aip_clone->em_iri) {
      // Only add if not already present in the given AIP.
      archidora_send_to_archivematica($parent, $aip_clone);
    }
  }
}
